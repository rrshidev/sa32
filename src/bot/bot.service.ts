import { Injectable } from '@nestjs/common';
import { Telegraf } from 'telegraf';
import { ConfigService } from '@nestjs/config';
import { UserService } from '../user/user.service';
import { CarService } from '../car/car.service';
import { Markup } from 'telegraf';
import { Context } from 'telegraf';

@Injectable()
export class BotService {
  private bot: Telegraf;
  private registrationState: Map<number, { step: string; data: any }> =
    new Map();

  constructor(
    private configService: ConfigService,
    private userService: UserService,
    private carService: CarService,
  ) {
    this.bot = new Telegraf(this.configService.get('TELEGRAM_BOT_TOKEN'));
    this.initHandlers();
  }

  private async initHandlers() {
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
    this.bot.start(async (ctx) => {
      const telegramId = ctx.from.id;
      const user = await this.userService.findByTelegramId(telegramId);

      if (!user) {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        await this.userService.create({
          telegramId,
          name: ctx.from.first_name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π',
          username: ctx.from.username || null,
          isRegistered: false,
        });

        await this.showRegistrationPrompt(ctx);
      } else if (!user.isRegistered) {
        await this.showRegistrationPrompt(ctx);
      } else {
        await ctx.reply(`–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, ${user.name || '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}!`);
        await this.showMainMenu(ctx);
      }
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /menu
    this.bot.command('menu', async (ctx) => {
      await this.showMainMenu(ctx);
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /cancel
    this.bot.command('cancel', async (ctx) => {
      this.registrationState.delete(ctx.from.id);
      await ctx.reply('–¢–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.');
      await this.showMainMenu(ctx);
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    this.bot.action('register_yes', async (ctx) => {
      const telegramId = ctx.from.id;
      this.registrationState.set(telegramId, { step: 'name', data: {} });
      await ctx.editMessageText(
        '–û—Ç–ª–∏—á–Ω–æ! –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è (–∏–ª–∏ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã):',
      );
    });

    this.bot.action('register_no', async (ctx) => {
      await ctx.editMessageText(
        '–í—ã –º–æ–∂–µ—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –ø–æ–∑–∂–µ —á–µ—Ä–µ–∑ /start –∏–ª–∏ –º–µ–Ω—é.',
      );
      await this.showMainMenu(ctx);
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏)
    this.bot.on('text', async (ctx) => {
      const telegramId = ctx.from.id;
      const state = this.registrationState.get(telegramId);

      if (state) {
        switch (state.step) {
          case 'name':
            state.data.name = ctx.message.text;
            state.step = 'phone';
            await ctx.reply('–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω:');
            break;

          case 'phone':
            state.data.phone = ctx.message.text;
            state.step = 'car_mark';
            await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –º–∞—Ä–∫—É –≤–∞—à–µ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è:');
            break;

          case 'car_mark':
            state.data.carMark = ctx.message.text;
            state.step = 'car_model';
            await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –º–æ–¥–µ–ª—å –≤–∞—à–µ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è:');
            break;

          case 'car_model':
            state.data.carModel = ctx.message.text;
            state.step = 'car_year';
            await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –≥–æ–¥ –≤—ã–ø—É—Å–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è:');
            break;

          case 'car_year':
            state.data.carYear = parseInt(ctx.message.text);

            // –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
            const user = await this.userService.completeRegistration(
              telegramId,
              {
                name: state.data.name,
                phone: state.data.phone,
                isRegistered: true,
              },
            );

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–∞—à–∏–Ω—É
            await this.carService.create({
              mark: state.data.carMark,
              model: state.data.carModel,
              year: state.data.carYear,
              user,
            });

            this.registrationState.delete(telegramId);
            await ctx.reply('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –°–ø–∞—Å–∏–±–æ!');
            await this.showMainMenu(ctx);
            break;
        }
      }
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    this.bot.action('workshops_list', async (ctx) => {
      await ctx.editMessageText('–°–ø–∏—Å–æ–∫ –º–∞—Å—Ç–µ—Ä—Å–∫–∏—Ö –±—É–¥–µ—Ç –∑–¥–µ—Å—å...');
    });

    this.bot.action('my_bookings', async (ctx) => {
      await ctx.editMessageText('–í–∞—à–∏ –∑–∞–ø–∏—Å–∏ –±—É–¥—É—Ç –∑–¥–µ—Å—å...');
    });

    this.bot.action('quick_booking', async (ctx) => {
      await ctx.editMessageText('–ë—ã—Å—Ç—Ä–∞—è –∑–∞–ø–∏—Å—å –±—É–¥–µ—Ç –∑–¥–µ—Å—å...');
    });

    this.bot.action('my_garage', async (ctx) => {
      const user = await this.userService.findByTelegramId(ctx.from.id);
      if (!user?.isRegistered) {
        await ctx.reply('–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –≥–∞—Ä–∞–∂—É –Ω—É–∂–Ω–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.');
        await this.showRegistrationPrompt(ctx);
        return;
      }
      await ctx.editMessageText('–í–∞—à –≥–∞—Ä–∞–∂ –±—É–¥–µ—Ç –∑–¥–µ—Å—å...');
    });

    this.bot.action('support', async (ctx) => {
      await ctx.editMessageText('–¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞: @–≤–∞—à_–∞–∫–∫–∞—É–Ω—Ç');
    });
  }

  private async showRegistrationPrompt(ctx: Context) {
    await ctx.reply(
      '–•–æ—Ç–∏—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è? –≠—Ç–æ –ø–æ–∑–≤–æ–ª–∏—Ç —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –∏ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –∑–∞–ø–∏—Å–∏.',
      Markup.inlineKeyboard([
        Markup.button.callback('–î–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å', 'register_yes'),
        Markup.button.callback(
          '–ù–µ—Ç, –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ–∑ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏',
          'register_no',
        ),
      ]),
    );
  }

  private async showMainMenu(ctx: Context) {
    const user = await this.userService.findByTelegramId(ctx.from.id);
    const welcomeText = user?.name
      ? `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${user.name}!`
      : '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!';

    await ctx.reply(
      `${welcomeText}\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`,
      Markup.inlineKeyboard([
        [
          Markup.button.callback('üè¢ –°–ø–∏—Å–æ–∫ –º–∞—Å—Ç–µ—Ä—Å–∫–∏—Ö', 'workshops_list'),
          Markup.button.callback('üìã –ú–æ–∏ –∑–∞–ø–∏—Å–∏', 'my_bookings'),
        ],
        [
          Markup.button.callback('‚è± –ë—ã—Å—Ç—Ä–∞—è –∑–∞–ø–∏—Å—å', 'quick_booking'),
          Markup.button.callback('üöó –ú–æ–π –≥–∞—Ä–∞–∂', 'my_garage'),
        ],
        [
          Markup.button.callback('üÜò –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞', 'support'),
          Markup.button.callback('‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏', 'settings'),
        ],
      ]),
    );
  }

  async startPolling() {
    await this.bot.launch();
    console.log('Bot started');
  }
}
